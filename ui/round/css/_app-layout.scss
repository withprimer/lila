.rcontrols {
  grid-area: controls;
}

.material-top {
  grid-area: mat-top;
}

.material-bottom {
  grid-area: mat-bot;
}

.expiration-top {
  grid-area: expi-top;
}

.expiration-bottom {
  grid-area: expi-bot;
}

.ruser-top {
  grid-area: user-top;
}

.ruser-bottom {
  grid-area: user-bot;
}

.rclock-top {
  grid-area: clock-top;
}

.rclock-bottom {
  grid-area: clock-bot;
}

#{$rmoves-tag},
.col1-rmoves-preload {
  grid-area: moves;
}

.keyboard-move {
  grid-area: kb-move;
}

.round__app {
  display: grid;

  position: absolute;
  top: 0;
  right: 0;
  width: 100%;
  height: 100vh;

  .right {
    border-left: 1px solid $c-primer-stroke;
  }

  .left {
    padding: 0 24px;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  @include breakpoint($mq-col1) {
    grid-template-rows: auto auto $col1-user-height $col1-mat-height auto auto $col1-mat-height $col1-user-height auto;
    grid-template-areas: 'moves' 'pocket-top' 'user-top' 'mat-top' 'board' 'expi-bot' 'mat-bot' 'user-bot' 'pocket-bot' 'kb-move' 'controls';

    // Put clocks and players in the same grid cell.
    // This allows having a single cell column, instead of
    // columns: auto min-content;
    // This is required to display the overflowable horizontal move list,
    // so that it can be contain within the grid parent.
    .rclock-top {
      grid-area: 3 / 1 / 5 / 2;
    }

    .rclock-bottom {
      grid-area: 7 / 1 / 9 / 2;
    }

    cg-board {
      box-shadow: none;
    }

    .expiration-top {
      display: none;
    }

    &__table {
      display: none;
    }
  }

  @include breakpoint($mq-col2) {
    grid-template-columns: $col2-uniboard-width 1fr;
    grid-template-areas: 'board table';
    grid-column-gap: $block-gap;

    &__table {
      grid-area: 4 / 2 / 10 / 3;
    }

    .expiration-top {
      display: flex;
    }

    #{$rmoves-tag} {
      margin-bottom: 1px;
    }

    #{$moves-tag} {
      display: none;
      background: none;
    }

    .keyboard-move {
      margin-top: $block-gap;
    }

    @include breakpoint($mq-short) {
      #{$moves-tag} {
        display: flex;
      }
    }
  }

  @include breakpoint($mq-col2-uniboard-squeeze) {
    grid-template-columns: $col2-uniboard-squeeze-width $col2-uniboard-squeeze-table;
    grid-column-gap: #{$block-gap * 3 / 2};
  }

  &__board {
    grid-area: board;
  }
}

// .round__app {
//   display: grid;
//   grid-template-columns: 60% 40%;
//   justify-items: stretch;
//   // justify-content: space-between;
//   // flex-direction: column;
//   // flex: 1 1 0;

//   // position: absolute;
//   // top: 0;
//   // right: 0;
//   // width: 100%;
//   // height: 100%;

//   // @include breakpoint($mq-col2) {
//   //   flex-direction: row;
//   // }

//   .right {
//     border-left: 1px solid $c-primer-stroke;
//   }

//   .left {
//     height: 100vh;
//     padding: 0 24px;
//   }
// }
